{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"Scrawler Labs"},{"location":"#components","title":"Components","text":"<ul> <li>Scrawler Router - A Fully Automatic RESTful PHP Router [Docs] [Github] </li> <li>Arca ORM - Low code , Zero Configuration ORM that creates models, config, database and tables on the fly [Docs] [Github]</li> <li>Swoole Postgres Doctrine - A Doctrine DBAL Driver implementation on top of Swoole Coroutine PostgreSQL extension, built for Doctrine DBAL and Arcac ORM [Github]</li> <li>Swoole Cache - A High speed , PSR-16 compatible cache library based on swoole-tables [Github]</li> </ul>"},{"location":"#community","title":"Community","text":"<p>We have recently started new community effort around Scrawler Framework, you are invited to join our Discord Server, or you can be a part of discussion on our Github coummunity</p>"},{"location":"arca-orm/","title":"Getting Started","text":""},{"location":"arca-orm/#why-use-arca-orm","title":"Why use Arca Orm ?","text":"<ul> <li>Automatically creates tables and columns as you go</li> <li>No configuration, just fire and forget</li> <li>Save loads of time while working on database</li> <li>Built upon stable foundation of Doctrine Dbal and extensively tested</li> <li>Thanks to loophp Arca comes with Lazy collection and tons of helper collection functions</li> <li>Supports lots database platforms , you can see the complete list here</li> <li>Supports concurrent queries and connection pooling with swoole and async with amphp. Check out integration docs here</li> </ul>"},{"location":"arca-orm/#requirements","title":"Requirements","text":"<ul> <li>PHP 8.1 or greater</li> <li>PHP PDO or other supported database adapter</li> <li>Mysql, MariaDB, Sqlite or any other supported database. check the list here</li> </ul>"},{"location":"arca-orm/#installation","title":"Installation","text":"<p>You can install Arca ORM via Composer. If you don't have composer installed , you can download composer from here</p> <pre><code>composer require scrawler/arca\n</code></pre>"},{"location":"arca-orm/#quickstart","title":"QuickStart","text":""},{"location":"arca-orm/#setup","title":"Setup","text":"<pre><code>   &lt;?php\n    include './vendor/autoload.php'\n\n    $connectionParams = array(\n        'dbname' =&gt; 'YOUR_DB_NAME',\n        'user' =&gt; 'YOUR_DB_USER',\n        'password' =&gt; 'YOUR_DB_PASSWORD',\n        'host' =&gt; 'YOUR_DB_HOST',\n        'driver' =&gt; 'pdo_mysql', //You can use other supported driver this is the most basic mysql driver\n    );\n\n    // For Arca ORM 1.x\n    // $db =  new \\Scrawler\\Arca\\Database($connectionParams);\n\n    // For Arca 2.x and later \n    $db = \\Scrawler\\Arca\\Facade\\Database::connect($connectionParams);\n\n</code></pre> <p>For complete list of driver check here</p> <p>ID and UUID</p> <p>using uuid instead of id is a good idea but it may come with some performance issues, uuid even takes up more space than auto increment id. For your usecase if you want to use uuid as primary key instead on auto increment id just do the following </p> <p><code>php $db-&gt;useUUID();</code> once you have switched to UUID don't switch back to using id as it will cause lot of unwanted issues.</p>"},{"location":"arca-orm/#crud","title":"CRUD","text":"<pre><code>\n    // Create new record\n    // The below code will automatically create user table and store the record\n\n    $user = $db-&gt;create('user');\n    $user-&gt;name = \"Pranja Pandey\";\n    $user-&gt;age = 24\n    $user-&gt;gender = \"male\"\n    $user-&gt;save()\n\n    // Get record with id 1\n\n    $user = $db-&gt;get('user',1);\n\n    //Get all records\n\n    $users = $db-&gt;get('user');\n\n    // Update a record\n     $user = $db-&gt;get('user',1);\n     $user-&gt;name = \"Mr Pranjal\";\n     $user-&gt;save();\n\n    // Delete a record\n     $user = $db-&gt;get('user',1);\n     $user-&gt;delete();\n\n</code></pre>"},{"location":"arca-orm/#finding-data-with-query","title":"Finding data with query","text":"<pre><code>\n  // Using where clause\n  $users = $db-&gt;find('user')\n              -&gt;where('name = \"Pranjal Pandey\"')\n              -&gt;get();\n\n  foreach ($users as $user){\n  // Some logic here \n  }\n\n  // Get only single record\n  $users = $db-&gt;find('user')\n             -&gt;where('name = \"Pranjal Pandey\"')\n             -&gt;first();  \n\n  // Using limit in query\n  $users = $db-&gt;find('user')\n              -&gt;setFirstResult(10)\n              -&gt;setMaxResults(20);\n              -&gt;get()\n\n</code></pre>"},{"location":"arca-orm/changelog/","title":"Changelog","text":"<p>Changelog for each release can be found at https://github.com/scrawler-labs/arca-orm/releases</p>"},{"location":"arca-orm/changelog/#backword-compatibility","title":"Backword Compatibility","text":"<p>Special care is taken to maintain backward compatibility between versions until its really necessary to break one. Process is followed to provide deprication notice before removing the feature.</p>"},{"location":"arca-orm/collections/","title":"Collections","text":""},{"location":"arca-orm/collections/#collection","title":"Collection","text":"<p><code>\\Scrawler\\Arca\\Collection</code> is based on loophp-collection hence table row is lazily converted to model when required giving a performance boost.</p>"},{"location":"arca-orm/collections/#helper-functions","title":"Helper functions","text":"<p>Here is some of the helper function Arca Collection provide.</p> <pre><code>$users = $db-&gt;find('user')-&gt;where('active = 1')-&gt;get();\n$adults = $db-&gt;find('user')-&gt;where('age &gt; 18')-&gt;get();\n\n\n//Get first element from collection\n$users-&gt;first(); \n\n//Get last element from collection\n\n// Merge two collections\n$users-&gt;merge($adults);\n\n//Map Data\n$collection\n    -&gt;map(\n        static function ($user, $key): string {\n            //Note : $value will be instance of \\Scrawler\\Arca\\Model\n            unset($user-&gt;dob);\n        }\n    )\n    -&gt;all();\n\n// Filter\n$users \n    -&gt;filter(static fn ($user): bool =&gt; $user-&gt;email != null);\n// This filter removes all user with no email id\n\n// Apply callback on every model\n$users-&gt;apply(\n        static function ($value, $key): bool {\n            print($user-&gt;name);\n\n            return true;\n        }\n    );\n\n//limit collection to certain number of values\n$users-&gt;limit(3);\n\n\n</code></pre> <p>Standalone Collections</p> <p>If you want to to create standalone collections  you can directly create instance of <code>loophp\\collection\\Collection</code> find all available methods here</p>"},{"location":"arca-orm/crud/","title":"CRUD","text":""},{"location":"arca-orm/crud/#create","title":"Create","text":"<p>Create a model using the database instance, once you save the model Arca will automatically create required columns and tables for you.</p> <p>Note: Use singular model name with small case letters, also don't use special characters</p> <pre><code>$user = $db-&gt;create('user');\n$user-&gt;name = \"John Doe\";\n$user-&gt;email = \"john@example.com\";\n$user-&gt;age = 22;\n$user-&gt;save();\n</code></pre>"},{"location":"arca-orm/crud/#read","title":"Read","text":"<p>A single record is instance of <code>Scrawler\\Arca\\Model</code> and multiple records(collection) is instance of <code>Scrawler\\Arca\\Collection</code> </p> <pre><code>\n// Get single record using id\n$id = 1;\n$user = $db-&gt;get('user',$id);\nprint($user);\n\n//Read single column of record\nprint($user-&gt;name);\nprint($user-&gt;age);\n\n//convert /Scrawler/Arca/Model to array\n$user-&gt;toArray();\n\n// Get all records from a table\n$users = $db-&gt;get('user');\nforeach($users as $user){\n  // Perform some actions ..\n}\n</code></pre>"},{"location":"arca-orm/crud/#update","title":"Update","text":"<p>To update a model just retrieve the model , modify the fields and save the model, Arca will automatically update record for you </p> <pre><code>\n$user = $db-&gt;get('user',1);\n$user-&gt;name = \"Pranjal Pandey\";\n$user-&gt;save();\n\n</code></pre>"},{"location":"arca-orm/crud/#delete","title":"Delete","text":"<p>To delete a model just call delete method on the model</p> <pre><code>\n$user = $db-&gt;get('user',1);\n$user-&gt;delete();\n\n</code></pre>"},{"location":"arca-orm/database/","title":"Database and Drivers","text":""},{"location":"arca-orm/database/#database-class","title":"Database class","text":"<p><code>\\Scrawler\\Arca\\Database</code> serves as a entry point for Arca, it provides you with all the utility functions from model creation to advance things like table manager. The most basic function of this class is to connect with database and creating/getting models.</p> <p>To initialise database you need to pass the appropriate drivers and all details required by that driver.</p> <pre><code>\n// Basic Setup \n    $connectionParams = array(\n        'dbname' =&gt; 'YOUR_DB_NAME',\n        'user' =&gt; 'YOUR_DB_USER',\n        'password' =&gt; 'YOUR_DB_PASSWORD',\n        'host' =&gt; 'YOUR_DB_HOST',\n        'driver' =&gt; 'pdo_mysql', //You can use other supported driver this is the most basic mysql driver\n    );\n\n    $db =  new \\Scrawler\\Arca\\Database($connectionParams);\n\n// create a model\n$user = $db-&gt;create('user');\n$user-&gt;name = 'Pranjal Pandey';\n$user-&gt;email = 'therealpranjal@gmail.com';\n$user-&gt;save();\n\n// retrive single model via id \n$user = $db-&gt;get('user',1);\n\n// retrive all models (collection) from table\n$user = $db-&gt;get('user');\n\n</code></pre>"},{"location":"arca-orm/database/#supported-databases","title":"Supported databases","text":"<ul> <li>MySQL</li> <li>Oracle</li> <li>Microsoft SQL Server</li> <li>PostgreSQL</li> <li>SQLite</li> </ul>"},{"location":"arca-orm/database/#drivers","title":"Drivers","text":"<p>Arca support a lot of database and drivers, here is a list of some built in drivers:</p> <ul> <li>pdo_mysql: A MySQL driver that uses the pdo_mysql PDO extension.</li> <li>mysqli: A MySQL driver that uses the mysqli extension.</li> <li>pdo_sqlite: An SQLite driver that uses the pdo_sqlite PDO extension.</li> <li>pdo_pgsql: A PostgreSQL driver that uses the pdo_pgsql PDO extension.</li> <li>pdo_sqlsrv: A Microsoft SQL Server driver that uses pdo_sqlsrv PDO</li> <li>sqlsrv: A Microsoft SQL Server driver that uses the sqlsrv PHP extension.</li> <li>oci8: An Oracle driver that uses the oci8 PHP extension.</li> </ul> <p>Here is configuration parameters for each drivers:</p>"},{"location":"arca-orm/database/#pdo_mysql","title":"pdo_mysql","text":"<ul> <li>user (string): Username to use when connecting to the database.</li> <li>password (string): Password to use when connecting to the database.</li> <li>host (string): Hostname of the database to connect to.</li> <li>port (integer): Port of the database to connect to.</li> <li>dbname (string): Name of the database/schema to connect to.</li> <li>unix_socket (string): Name of the socket used to connect to the database.</li> <li>charset (string): The charset used when connecting to the database.</li> </ul>"},{"location":"arca-orm/database/#mysqli","title":"mysqli","text":"<ul> <li>user (string): Username to use when connecting to the database.</li> <li>password (string): Password to use when connecting to the database.</li> <li>host (string): Hostname of the database to connect to.</li> <li>port (integer): Port of the database to connect to.</li> <li>dbname (string): Name of the database/schema to connect to.</li> <li>unix_socket (string): Name of the socket used to connect to the database.</li> <li>charset (string): The charset used when connecting to the database.</li> <li>ssl_key (string): The path name to the key file to use for SSL encryption.</li> <li>ssl_cert (string): The path name to the certificate file to use for SSL encryption.</li> <li>ssl_ca (string): The path name to the certificate authority file to use for SSL encryption.</li> <li>ssl_capath (string): The pathname to a directory that contains trusted SSL CA certificates in PEM format.</li> <li>ssl_cipher (string): A list of allowable ciphers to use for SSL encryption.</li> <li>driverOptions Any supported flags for mysqli found on http://www.php.net/manual/en/mysqli.real-connect.php</li> </ul>"},{"location":"arca-orm/database/#pdo_sqlite","title":"pdo_sqlite","text":"<ul> <li>user (string): Username to use when connecting to the database.</li> <li>password (string): Password to use when connecting to the database.</li> <li>path (string): The filesystem path to the database file. Mutually exclusive with memory. path takes precedence.</li> <li>memory (boolean): True if the SQLite database should be in-memory (non-persistent). Mutually exclusive with path. path takes precedence.</li> </ul>"},{"location":"arca-orm/database/#pdo_pgsql","title":"pdo_pgsql","text":"<ul> <li>user (string): Username to use when connecting to the database.</li> <li>password (string): Password to use when connecting to the database.</li> <li>host (string): Hostname of the database to connect to.</li> <li>port (integer): Port of the database to connect to.</li> <li>dbname (string): Name of the database/schema to connect to.</li> <li>charset (string): The charset used when connecting to the database.</li> <li>default_dbname (string): Override the default database (postgres) to connect to.</li> <li>sslmode (string): Determines whether or with what priority a SSL TCP/IP connection will be negotiated with the server. See the list of available modes: https://www.postgresql.org/docs/9.4/static/libpq-connect.html#LIBPQ-CONNECT-SSLMODE</li> <li>sslrootcert (string): specifies the name of a file containing SSL certificate authority (CA) certificate(s). If the file exists, the server's certificate will be verified to be signed by one of these authorities. See https://www.postgresql.org/docs/9.4/static/libpq-connect.html#LIBPQ-CONNECT-SSLROOTCERT</li> <li>sslcert (string): specifies the filename of the client SSL certificate. See https://www.postgresql.org/docs/9.4/static/libpq-connect.html#LIBPQ-CONNECT-SSLCERT</li> <li>sslkey (string): specifies the location for the secret key used for the client certificate. See https://www.postgresql.org/docs/9.4/static/libpq-connect.html#LIBPQ-CONNECT-SSLKEY</li> <li>sslcrl (string): specifies the filename of the SSL certificate revocation list (CRL). See https://www.postgresql.org/docs/9.4/static/libpq-connect.html#LIBPQ-CONNECT-SSLCRL</li> <li>application_name (string): Name of the application that is connecting to database. Optional. It will be displayed at pg_stat_activity.</li> </ul>"},{"location":"arca-orm/database/#pdo_sqlsrv-sqlsrv","title":"pdo_sqlsrv / sqlsrv","text":"<ul> <li>user (string): Username to use when connecting to the database.</li> <li>password (string): Password to use when connecting to the database.</li> <li>host (string): Hostname of the database to connect to.</li> <li>port (integer): Port of the database to connect to.</li> <li>dbname (string): Name of the database/schema to connect to.</li> </ul>"},{"location":"arca-orm/database/#oci8","title":"oci8","text":"<ul> <li>user (string): Username to use when connecting to the database.</li> <li>password (string): Password to use when connecting to the database.</li> <li>host (string): Hostname of the database to connect to.</li> <li>port (integer): Port of the database to connect to.</li> <li>dbname (string): Name of the database/schema to connect to.</li> <li>servicename (string): Optional name by which clients can connect to the database instance. Will be used as Oracle's SID connection parameter - if given and defaults to Doctrine's dbname connection parameter value.</li> <li>service (boolean): Whether to use Oracle's SERVICE_NAME connection parameter in favour of SID when connecting. The value for this will be read from Doctrine's servicename if given, dbname otherwise.</li> <li>pooled (boolean): Whether to enable database resident connection pooling.</li> <li>charset (string): The charset used when connecting to the database.</li> <li>instancename (string): Optional parameter, complete whether to add the INSTANCE_NAME parameter in the connection. It is generally used to connect to an Oracle RAC server to select the name of a particular instance.</li> <li>connectstring (string): Complete Easy Connect connection descriptor, see https://docs.oracle.com/database/121/NETAG/naming.htm. When using this option, you will still need to provide the user and password parameters, but the other parameters will no longer be used. Note that when using this parameter, the getHost and getPort methods from Doctrine\\DBAL\\Connection will no longer function as expected.</li> <li>persistent (boolean): Whether to establish a persistent connection.</li> </ul>"},{"location":"arca-orm/finding/","title":"Finding (Query)","text":""},{"location":"arca-orm/finding/#finding","title":"Finding","text":"<p>Thanks to Doctrine DBAL Arca comes with a powerful query builder, to get instance of query builder just use the <code>find()</code> function. Once you have built the query just user <code>get()</code> to execute query and get multiple records or <code>first()</code> to execute query and get single record.  </p> <pre><code>\n// Get multiple records (returns \\Scrawler\\Arca\\Collection)\n$users = $db-&gt;find('user')\n            -&gt;where('name = \"Pranjal Pandey\"')\n            -&gt;get();\n\n// Get single record (returns \\Scrawler\\Arca\\MOdel)\n$users = $db-&gt;find('user')\n            -&gt;where('name = \"Pranjal Pandey\"')\n            -&gt;first();\n</code></pre>"},{"location":"arca-orm/finding/#where-clause","title":"WHERE-Clause","text":"<p>Arca supports where query using <code>where()</code> function and to use multiple where query just add <code>andWhere()</code> or <code>orWhere()</code></p> <pre><code>\n// AND Where\n$users = $db-&gt;find('user')\n            -&gt;where('name = \"Pranjal Pandey\"')\n            -&gt;andwhere('age = 22')\n            -&gt;get();\n\n// OR Where\n$users = $db-&gt;find('user')\n            -&gt;where('name = \"Pranjal Pandey\"')\n            -&gt;orwhere('name = \"John Doe\"')\n            -&gt;get();\n\n</code></pre>"},{"location":"arca-orm/finding/#order-by-clause","title":"ORDER BY Clause","text":"<p>The <code>orderBy($sort, $order = null)</code> method adds an expression to the ORDER BY clause.  Note: Be aware that the optional $order parameter is not safe for user input and accepts SQL expressions.</p> <pre><code>\n$users = $db-&gt;find('user')\n            -&gt;orderBy('username', 'ASC')\n            -&gt;addOrderBy('last_login', 'ASC NULLS FIRST')\n            -&gt;get();\n\n</code></pre>"},{"location":"arca-orm/finding/#limit-clause","title":"LIMIT Clause","text":"<p>Arca supports LIMIT clause on all vendor using <code>setFirstResult($offset)</code> to set the offset and <code>setMaxResults($limit)</code> to set the limit of results returned.</p> <pre><code>\n$users = $db-&gt;find('user')\n           -&gt;setFirstResult(10)\n           -&gt;setMaxResults(20)\n           -&gt;get();\n\n</code></pre>"},{"location":"arca-orm/finding/#group-by-clause","title":"GROUP BY Clause","text":"<p>Arca supports GROUP BY query using <code>groupBy()</code> to have multiple group by you can use <code>addGroupBy()</code></p> <pre><code>$users = $db-&gt;find('user')\n            -&gt;groupBy('last_login')\n            -&gt;get();\n</code></pre>"},{"location":"arca-orm/models/","title":"Models and Collection","text":""},{"location":"arca-orm/models/#model","title":"Model","text":"<p>A row in database is represented by a model in Arca. Arca can perform all magic due to models to create a new row, you just need to create a new model and save </p> <pre><code>//create a new model \n$user = $db-&gt;create('user');\n$user-&gt;name = \"John Doe\";\n$user-&gt;email = \"John@test.com\";\n\n//Save functions returns the id of newly created/ updated record\n$id = $user-&gt;save();\n\n</code></pre>"},{"location":"arca-orm/models/#magic-methods","title":"Magic methods","text":"<p>Model utilised php's magic __get() and __set() method to provide a neat and simple ways to set values in model and retrive values , once a row is fetched it is sync with model properties</p>"},{"location":"arca-orm/models/#helper-functions","title":"Helper functions","text":"<p>Model comes with few helper to make your life easier</p> <pre><code>$user = $db-&gt;get('user',1);\n\n// Converts model object to an array with properties\n$user-&gt;toArray();\n\n// Converts model object to json string\n$user-&gt;toString();\n\n//unset a value\nunset($user-&gt;name)\n\n// returns the name of associated table\n$user-&gt;getName();\n\n//Bulk set properties using array\n$array = ['name'=&gt;'Pranjal','email'=&gt;'itspranjalpandey@gmail.com']\n$user-&gt;setProperties($array);\n$user-&gt;save();\n\n// Check if property exist exists\nisset($user);\n\n</code></pre>"},{"location":"arca-orm/models/#collection","title":"Collection","text":"<p>A collection represent multiple rows of database if a query returns multiple rows. A <code>collection class</code> is a collection of Models. Collection comes with multiple helper utility. </p> <pre><code>\n$users = $db-&gt;get('user');\n\n// You can iterate through collection like regular arrays\nforeach($users as $user){\n  //Note: $user will be a instance of \\Scrawler\\Arca\\Model\n  print($user-&gt;name);\n}\n\n// You can convert collection to array \n$users-&gt;toArray()\n\n// You can convert collection to json string \n$users-&gt;toString();\n</code></pre> <p>Info</p> <p>To learn more visit Collections doc</p>"},{"location":"arca-orm/relations/","title":"Relations","text":"<p>Arca takes heavy lifting of relations from you and provide a simple and clean way to work with relations using simple NoSQL like approach </p>"},{"location":"arca-orm/relations/#one-to-one","title":"one-to-one","text":"<p>To save two tables with one-to-one relation just pass child model to parent model with key as child <code>$parent-&gt;child = $child</code> Arca will save both tables for you and create a one-to-one relation amongst them too.</p> <pre><code>\n//Saving record\n$engine = $db-&gt;create('engine');\n$engine-&gt;name = 'straight six engine';\n$engine-&gt;manufacturer = 'BMW';\n\n$car = $db-&gt;create('car')\n$car-&gt;name = 'BMW M340i';\n$car-&gt;engine = $engine\n$car-&gt;save();\n\n// Retrieving one-to-one relation \n$car = $db-&gt;get('car',1);\nprint($car-&gt;engine);\n\n</code></pre>"},{"location":"arca-orm/relations/#one-to-many","title":"one-to-many","text":"<p>To save two tables with one-to-many relation just pass multiple children models to parent model with key as \"selfChildList\" <code>$parent-&gt;selfChildList = [$child_one,$child_two]</code> Arca will save all records for you and create a one-to-many relation amongst them, to do this Arca adds a key <code>parent_id</code> to the child table</p> <pre><code>\n//Saving record\n$burger = $db-&gt;create('food');\n$burger-&gt;name = 'burger';\n$burger-&gt;price = 100;\n\n$pizza = $db-&gt;create('food');\n$pizza-&gt;name = 'pizza';\n$pizza-&gt;price = 220;\n\n$restaurant = $db-&gt;create('restaurant');\n$restaurant-&gt;name = 'Food Joint';\n$restaurant-&gt;selfFoodList = [$burger,$pizza];\n$restaurant-&gt;save(); // restaurant_id will be added as foreign key to food table\n\n// Retrieving one-to-many relation;\n$restaurant = $db-&gt;get('restaurant',1);\n$foods = $restaurant-&gt;selfFoodList;\nforeach($foods as $food){\nprint($food);\n}\n\n// You can even retrieve parent table from child table;\n$food = $db-&gt;get('food',1);\nprint($food-&gt;restaurant);  \n\n</code></pre>"},{"location":"arca-orm/relations/#many-to-one","title":"many-to-one","text":"<p>This works just as inverse on one-to-many, to create a many-to-one relation just store the parent key to all child models <code>$child-&gt;parent = $parent</code></p> <pre><code>\n$shop= $db-&gt;create('shop');\n$shop-&gt;name = 'Toy Shop';\n$shop-&gt;save();\n\n//Important : parent needs to be saved first before being refrenced in child\n$car= $db-&gt;create('toy');\n$car-&gt;name = 'RC Car';\n$car-&gt;price = 320;\n$car-&gt;shop = $shop;\n$car-&gt;save();\n\n$barbie = $db-&gt;create('toy');\n$barbie-&gt;name = 'Barbie';\n$barbie-&gt;price = 550;\n$barbie-&gt;shop = $shop;\n$barbie-&gt;save();\n\n\n// Retrieving parent from child\n$toy = $db-&gt;get('toy',1);\nprint($toy-&gt;shop);\n\n//retriving column of parent\nprint($toy-&gt;shop-&gt;name);  \n\n</code></pre>"},{"location":"arca-orm/relations/#many-to-many","title":"many-to-many","text":"<p>To save two tables with many-to-many relation just pass multiple children models to parent model with key as \"sharedChildList\" <code>$parent-&gt;sharedChildList = [$child_one,$child_two]</code>. Arca will shave all models and create a relational table named <code>parent_child</code> unlike one-to-many in many-to-many both table can have list of other table inversely</p> <pre><code>\n//Saving record\n$burger = $db-&gt;create('food');\n$burger-&gt;name = 'burger';\n$burger-&gt;price = 100;\n$burger-&gt;save();\n\n$pizza = $db-&gt;create('food');\n$pizza-&gt;name = 'pizza';\n$pizza-&gt;price = 220;\n$pizza-&gt;save();\n\n$restaurant = $db-&gt;create('restaurant');\n$restaurant-&gt;name = 'Food Joint';\n$restaurant-&gt;sharedFoodList = [$burger,$pizza];\n$restaurant-&gt;save(); // restaurant_id will be added as foreign key to food table\n\n$restaurant_two = $db-&gt;create('restaurant');\n$restaurant_two-&gt;name = 'Snack Junkie';\n$restaurant_two-&gt;sharedFoodList = [$burger,$pizza];\n$restaurant_two-&gt;save();\n// Retrieving one-to-many relation;\n$restaurant = $db-&gt;get('restaurant',1);\n$foods = $restaurant-&gt;sharedFoodList;\nforeach($foods as $food){\nprint($food);\n}\n\n\n// inversely yo can get list of restaurant from food;\n$food = $db-&gt;get('food',1);\n$restaurants = $food-&gt;sharedRestaurantList ;\nforeach($restaurants as $restaurant){\nprint($restaurant);\n}\n\n\n</code></pre>"},{"location":"arca-orm/swoole/","title":"Using with Swoole and AmpPHP","text":"<p>If you are interested in using Arca ORM with Async libraries there are various drivers available for same. Here are example for usage</p>"},{"location":"arca-orm/swoole/#swoole","title":"Swoole","text":"<p>Scrawler Labs provide a integration for swoole Postgres here</p>"},{"location":"arca-orm/swoole/#installation","title":"Installation","text":"<pre><code>composer require scrawler/swoole-postgresql-doctrine\n</code></pre>"},{"location":"arca-orm/swoole/#usage-with-arca-orm","title":"Usage with Arca ORM","text":"<p>Use the following configuration during setup </p> <pre><code> &lt;?php\n    include './vendor/autoload.php'\n\n    $connectionParams = array(\n    'dbname' =&gt; 'YOUR_DB_NAME',\n    'user' =&gt; 'YOUR_DB_USER',\n    'password' =&gt; 'YOUR_DB_PASSWORD',\n    'host' =&gt; 'YOUR_DB_HOST',\n    'driverClass' =&gt;\\Scrawler\\Swoole\\PostgreSQL\\Driver::class,\n    'poolSize' =&gt; 8, //you can set pool size to any number of parallel connection your db can support\n    );\n\n    $db =  new \\Scrawler\\Arca\\Database($connectionParams);\n\n</code></pre> <p>To know about using Co-routines please check readme here</p>"},{"location":"arca-orm/swoole/#amphp","title":"Amphp","text":"<p>You can use amphp with ARCA ORM using there official mysql-dbal implementation </p>"},{"location":"arca-orm/swoole/#installation_1","title":"Installation","text":"<pre><code>composer require amphp/mysql-dbal\n</code></pre>"},{"location":"arca-orm/swoole/#usage-with-arca-orm_1","title":"Usage with Arca ORM","text":"<p>Use the following configuration during setup </p> <pre><code> &lt;?php\n    include './vendor/autoload.php'\n\n    $connectionParams = array(\n    'driverClass' =&gt; \\Amp\\Mysql\\DBAL\\MysqlDriver::class,\n    'user' =&gt; 'YOUR_DB_USER',\n    'password' =&gt; 'YOUR_DB_PASSWORD',\n    'dbname' =&gt; 'YOUR_DB_NAME',\n    'host' =&gt; 'YOUR_DB_HOST'\n    );\n\n    $db =  new \\Scrawler\\Arca\\Database($connectionParams);\n</code></pre>"},{"location":"router/","title":"Getting Started","text":""},{"location":"router/#why-use-scrawler-router","title":"Why use Scrawler Router?","text":"<ul> <li>Fully automatic, you dont need to define single manual route.</li> <li>Support manual route defination for your edge use case.</li> <li>No configrations , works out of the box with any php project.</li> <li>Stable and well tested.</li> <li>Saves lot of time while building RESTful applications</li> </ul>"},{"location":"router/#installation","title":"Installation","text":"<p>You can install Scrawler Router via Composer. If you don't have composer installed , you can download composer from here</p> <pre><code>composer require scrawler/router\n</code></pre>"},{"location":"router/#setup","title":"Setup","text":"<p>Note 4.x release changes the way router handles request and response, if you still wanna continue using old way with symfony components goto 3.x branch </p> <pre><code>&lt;?php\n\nuse Scrawler\\Router\\Router;\n\n$dir = '/path/to/your/controllers';\n$namespace = 'Namespace\\of\\your\\controllers';\n\n$router = new Router();\n// Register your directory for automatic routing\n$router-&gt;register($dir,$namespace);\n\n/**\n* you can now also enblae route caching by passing your own PSR 16 implementation\n* $cache = new Psr\\SimpleCache\\CacheInterface();\n* $router-&gt;enableCache($cache);\n**/\n\n// Fetch method and URI from somewhere\n$httpMethod = $_SERVER['REQUEST_METHOD'];\n$uri = $_SERVER['REQUEST_URI'];\n\n// Strip query string (?foo=bar) and decode URI\nif (false !== $pos = strpos($uri, '?')) {\n    $uri = substr($uri, 0, $pos);\n}\n$uri = rawurldecode($uri);\n\n//Dispatch route and get back the response\n[$status,$handler,$args,$debug] = $router-&gt;dispatch($httpMethod,$uri);\nswitch ($status){\n  case \\Scrawler\\Router\\Router::NOT_FOUND:\n    //handle 404 error\n    // $debug contains extra debug info useful to check failure in automatic routing\n    break;\n  case \\Scrawler\\Router\\Router::METHOD_NOT_ALLOWED:\n    //handle 405 method not allowed\n    break;\n  case \\Scrawler\\Router\\Router::FOUND:\n    //call the handler\n    $response = call_user_func($handler,...$args);\n    // Send Response\n    //echo $response\n}\n\n</code></pre> <p>Done now whatever request occurs it will be automatically routed . You don't have define a single route</p>"},{"location":"router/home/","title":"Website homepage","text":"<p>Scrawler Router uses a special function name <code>allIndex()</code> and special controller name <code>Main</code>. So If you want to make a controller for your landing page <code>\\</code> the controller will be defines as follows</p> <pre><code>// Inside main.php\nclass Main\n{\n    // All request to your landing page will be resolved to this controller\n    // ALternatively you can use getIndex() to resolve only get request\n    public function allIndex()\n    {\n    }\n}\n</code></pre>"},{"location":"router/home/#main-controller","title":"Main Controller","text":"<p>Class name with <code>Main</code> signifies special meaning in Scrawler Router , if you wanna define pages route URL you can use main controler</p> <pre><code>// Inside main.php\nclass Main\n{\n    // Resolves `/`\n    public function getIndex()\n    {\n    }\n\n    // Resolves `/abc`\n    public function getAbc()\n    {\n\n    }\n\n    // Resolves `/hello`\n    public function getHello()\n    {\n\n    }\n}\n</code></pre>"},{"location":"router/home/#index-function","title":"Index function","text":"<p>Just like <code>Main</code> controller <code>allIndex(), getIndex(), postIndex()</code> etc signifies a special meaning , urls with only controller name and no function name will try to resolve into this function.</p> <pre><code>// Inside hello.php\nclass Hello\n{\n    // Resolves `/hello`\n    public function getIndex()\n    {\n\n    }\n\n    // Resolves `/hello/abc`\n    public function getAbc()\n    {\n\n    }\n}\n</code></pre>"},{"location":"router/how/","title":"Automatic Routing","text":""},{"location":"router/how/#how-it-works","title":"How it Works ?","text":"<p>The automatic routing is possible by following some conventions. Lets take a example lets say a controller Hello</p> <pre><code>&lt;?php\n//Hello.php\n\nclass Hello\n{\n    public function getWorld()\n    {\n        return \"Hello World\";\n    }\n}\n</code></pre> <p>Now calling <code>localhost/hello/world</code> from your browser you will see <code>hello world</code> on your screen.</p>"},{"location":"router/how/#how-is-it-able-to-do-it-automatically","title":"How is it able to do it automatically ?","text":"<p>Each request to the server is interpreted by Scrawler Router in following way:</p> <pre><code>METHOD    /controller/function/arguments1/arguments2 \n</code></pre> <p>The controller and function that would be invoked will be</p> <pre><code>&lt;?php\n\nclass Controller\n{\n    public function methodFunction($arguments1, $arguments2)\n    {\n        //Definition goes here\n    }\n}\n</code></pre> <p>For Example the following call:</p> <pre><code>GET  /user/find/1\n</code></pre> <p>would invoke following controller and method</p> <pre><code>&lt;?php\n\nclass User\n{\n    public function getFind($id)\n    {\n        //Function definition goes here\n    }\n}\n</code></pre> <p>Info</p> <p>In above example <code>1</code> will be passed as argument <code>$id</code></p>"},{"location":"router/how/#how-should-i-name-my-function-for-automatic-routing","title":"How should I name my function for automatic routing?","text":"<p>The function name in the controller should be named according to following convention</p> <pre><code>methodFunction\n</code></pre> <p>Note</p> <p>The method should always be written in small and the first word of function name should always start with capital.</p> <p>Valid methods are:</p> <pre><code>all - maps any kind of request method i.e it can be get,post etc\nget - mpas url called by GET method\npost - maps url called by POST method\nput - maps url called by PUT method\ndelete - maps url called by DELETE method\n</code></pre> <p>Some eg. of valid function names are:</p> <pre><code>getArticles, postUser, putResource\n</code></pre> <p>Invalid function names are:</p> <pre><code>GETarticles, Postuser, PutResource\n</code></pre>"},{"location":"router/manual/","title":"Manual Routing","text":""},{"location":"router/manual/#how-add-manual-route","title":"How add manual route ?","text":"<p>Manual routes can be added to route collection, Router first tries to resolve manual routes then it falls back to automated routing.  Manual routes always takes precedence over automated routes</p> <pre><code>&lt;?php\n// Initialize Router \n//$router = new Router();\n//$router-&gt;register($dir,$namespace);\n\n// GET /hello\n$router-&gt;get('/hello',function(){\n    return 'Hello World';\n})\n\n//Handle the response\n//[$status,$handler,$args,$debug] = $router-&gt;dispatch($httpMethod,$uri);\n\n\n</code></pre>"},{"location":"router/manual/#functions-for-defining-manual-route","title":"Functions for defining manual route","text":"<p>Manual routes can be defined by diffining endpoint on diffrent http methods</p> <pre><code>&lt;?php\n\n$router-&gt;get($route,$callable)\n$router-&gt;post($route,$callable)\n$router-&gt;put($route,$callable)\n$router-&gt;delete($route,$callable)\n\n</code></pre>"},{"location":"router/manual/#routing-with-pattern","title":"Routing with pattern","text":"<p>You can also define <code>:numeric</code> , <code>:string</code> and <code>:alpha</code> as pattern in your routes</p> <pre><code>\n$router-&gt;get( \"/\",function(){\n    return 'Hello'\n});\n\n$router-&gt;get( \"/page/:number\",function($page){\n    return 'Page number is :'.$page\n});\n\n$router-&gt;get( \"/product/:alpha\",function($product){\n    return 'Product is :'.$product\n});\n\n$router-&gt;get( \"/name/:string\",function($name){\n    return 'Name is :'.$name\n});\n\n</code></pre>"},{"location":"router/manual/#routing-with-regex","title":"Routing with regex","text":"<p>You can also use regex patterns for your routes, above examples can also be written as</p> <pre><code>\n$router-&gt;get( \"/\",function(){\n    return 'Hello'\n});\n\n$router-&gt;get( \"/page/([0-9]+)\",function($page){\n    return 'Page number is :'.$page\n});\n\n$router-&gt;get( \"/product/([a-zA-Z0-9-_]+)\",function($product){\n    return 'Product is :'.$product\n});\n\n$router-&gt;get( \"/name/([a-zA-Z]+)\",function($name){\n    return 'Name is :'.$name\n});\n\n</code></pre>"},{"location":"router/redirect/","title":"Redirection","text":"<p>If you want to redirect a request you can return a Symphony redirect response</p> <pre><code> use Symfony\\Component\\HttpFoundation\\RedirectResponse;\n use Symfony\\Component\\HttpFoundation\\Session\\Session;\n\n // Inside hello.php\nclass Hello\n{\n\n// set flash messages\n\n    public function getAbc()\n    {\n      // redirect to external urls\n      return new RedirectResponse('http://example.com/');\n\n     // Or alternatively you can set your arguments in flashbagk and redirect to internal URL \n     // Note you may use any flash manager to achieve this but as HttpFoundation is already a dependecy of Router here is a exmple with Symfony Session\n     $session = new Session();\n     $session-&gt;start();   \n     $session-&gt;getFlashBag()-&gt;add('notice', 'Profile updated');\n     return new RedirectResponse('http://mydomain.com/profile');\n\n    }\n}\n</code></pre> <p>Infact from Scrawler Router 3.1.0 you can directly return object of \\Symfony\\Component\\HttpFoundation\\Response from your controller</p>"},{"location":"router/server/","title":"Server Configuration","text":""},{"location":"router/server/#apache","title":"Apache","text":"<p>You may need to add the following snippet in your Apache HTTP server virtual host configuration or .htaccess file.</p> <pre><code>RewriteEngine on\nRewriteCond %{REQUEST_FILENAME} !-f\nRewriteCond %{REQUEST_FILENAME} !-d\nRewriteCond $1 !^(index\\.php)\nRewriteRule ^(.*)$ /index.php/$1 [L]\n</code></pre> <p>Alternatively, if you\u2019re lucky enough to be using a version of Apache greater than 2.2.15, then you can instead just use this one, single line:</p> <pre><code>FallbackResource /index.php\n</code></pre>"},{"location":"router/server/#iis","title":"IIS","text":"<p>For IIS you will need to install URL Rewrite for IIS and then add the following rule to your <code>web.config</code>:</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;configuration&gt;\n    &lt;system.webServer&gt;\n        &lt;rewrite&gt;\n            &lt;rule name=\"Toro\" stopProcessing=\"true\"&gt;\n                &lt;match url=\"^(.*)$\" ignoreCase=\"false\" /&gt;\n                &lt;conditions logicalGrouping=\"MatchAll\"&gt;\n                    &lt;add input=\"{REQUEST_FILENAME}\" matchType=\"IsFile\" ignoreCase=\"false\" negate=\"true\" /&gt;\n                    &lt;add input=\"{REQUEST_FILENAME}\" matchType=\"IsDirectory\" ignoreCase=\"false\" negate=\"true\" /&gt;\n                    &lt;add input=\"{R:1}\" pattern=\"^(index\\.php)\" ignoreCase=\"false\" negate=\"true\" /&gt;\n                &lt;/conditions&gt;\n                &lt;action type=\"Rewrite\" url=\"/index.php/{R:1}\" /&gt;\n            &lt;/rule&gt;\n        &lt;/rewrite&gt;\n    &lt;/system.webServer&gt;\n&lt;/configuration&gt;\n</code></pre>"},{"location":"router/server/#nginx","title":"Nginx","text":"<p>Under the <code>server</code> block of your virtual host configuration, you only need to add three lines.</p> <pre><code>location / {\n  try_files $uri $uri/ /index.php?$args;\n}\n</code></pre>"}]}